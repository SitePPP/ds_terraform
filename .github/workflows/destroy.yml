name: "Script de destruction"

on:
  workflow_dispatch:

env:
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  terraform-destroy:
    name: "Destruction de l'infrastructure"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Vérifier le contenu du repo
        run: ls -la

      - name: Récupérer le Terraform state depuis la branche 'state'
        run: |
          git fetch origin state || echo "Branche state inexistante"
          git checkout origin/state -- terraform.tfstate || echo "Aucun state à récupérer"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Destroy
        working-directory: ./terraform
        run: terraform destroy -auto-approve

      - name: Configurer Git pour le commit
        run: |
          git config user.email "ci-bot@example.com"
          git config user.name "CI Bot"

      - name: Sauvegarde du Terraform state dans 'state'
        run: |
          if [ -f terraform/terraform.tfstate ]; then
            cp terraform/terraform.tfstate terraform.tfstate
            git add terraform.tfstate
            git commit -m "Mise à jour du Terraform state après destroy" || echo "Aucun changement à committer"
            git push origin HEAD:state
          else
            echo "Le fichier terraform.tfstate n'existe pas. Rien à sauvegarder."
          fi
